// Default settings
// Use as fallck for application-dev, application-prod and application-test

application {
  stage = "undefined"
  workPath ="./data"
  logPath = "./logs"
  jerseyTraceLogging = false

  jettyConfig {
    serverConfig {
      useAccessLog = false
    }
    threadPoolConfig {
      minThreads = 8
      maxThreads = 200
      daemon = false
      name = ""
    }
    serverConnectorConfig {
      scheme = "http"
      host = "localhost"
      port = 8080
      idleTimeout = 30000
      shutdownToken = ""
    }
    webAppContextConfig {
      contextPath = "/"
      resourceBase = "/webapp"
      enableDirectoryListing = true
    }
  }

  persistenceUnitConfig {
    name = "jpa-example"

    properties = [
      // DB connection properties
      "javax.persistence.jdbc.driver = org.h2.Driver"
      "javax.persistence.jdbc.url = jdbc:h2:mem:mymemdb"
      "javax.persistence.jdbc.user = sa"
      "javax.persistence.jdbc.password ="

      // DDL properties
      // See: http://wiki.eclipse.org/EclipseLink/Release/2.5/JPA21#DDL_generation
      "javax.persistence.schema-generation.database.action = drop-and-create"
      "javax.persistence.sql-load-script-source = META-INF/import.sql"

      // Uncomment to to generate DDL to file
      //"javax.persistence.schema-generation.scripts.action = drop-and-create"
      //"javax.persistence.schema-generation.scripts.create-target = create.ddl"
      //"javax.persistence.schema-generation.scripts.drop-target = drop.ddl"

      // EclipseLink properties
      // See: http://eclipse.org/eclipselink/documentation/2.5/jpa/extensions/p_ddl_generation.htm
      "eclipselink.logging.level = WARNING"  // OFF, SEVERE, WARNING, INFO, CONFIG, FINE, FINER, FINEST, ALL
      "eclipselink.logging.level.sql = WARNING" //INFO"
      "eclipselink.logging.parameters = true"
      "eclipselink.logging.timestamp = true"
      "eclipselink.logging.session = true"
      "eclipselink.logging.thread = true"
      "eclipselink.logging.exceptions = true"

      // EL optimization, see: http://java-persistence-performance.blogspot.no/2011/06/how-to-improve-jpa-performance-by-1825.html
      "eclipselink.jdbc.cache-statements=true"
      "eclipselink.jdbc.batch-writing=JDBC"
      "eclipselink.jdbc.batch-writing.size= 1000"
      "eclipselink.persistence-context.flush-mode =commit"
      "eclipselink.persistence-context.close-on-commit = true"
      "eclipselink.persistence-context.persist-on-commit = false"
      "eclipselink.flush-clear.cache = drop"
    ]
  }
}


// A summary of the enabling DDL properties are as follows:

// javax.persistence.schema-generation.database.action
//   specifies the action to be taken by the persistence provider with regard to the database artifacts
//   Valid values for this property: none, create, drop-and-create, drop

// javax.persistence.schema-generation.scripts.action
//   Specifies which scripts are to be generated by the persistence provider. Scripts are only generated if
//   the corresponding generation location targets are specified.
//   Valid values for this property: none, create, drop-and-create, drop

// javax.persistence.schema-generation.create-source
//   Specifies how the database schema should be created. It can be by just using the annotation metadata
//   specified in the application entities, by executing a SQL script or a combination of both. You can also
//   define the order. This property does not need to be specified for schema generation to occur. The default
//   value is metadata. You need to be careful if you use a combination of create actions. The resulting actions
//   may generate unexpected behaviour in the database schema and lead to failure.
//   Valid values for this property: metadata, script, metadata-then-script, script-then-metadata

// javax.persistence.schema-generation.drop-source
//   Same as javax.persistence.schema-generation.create-source, but for drop actions.
//   Valid values for this property: metadata, script, metadata-then-script, script-then-metadata

// javax.persistence.schema-generation.create-database-schemas
//   specifies whether the persistence provider is to create the database schema(s) in addition to creating
//   database objects such as tables, sequences, constraints, etc.

// javax.persistence.schema-generation.scripts.create-target
//   specifies a java.IO.Writer configured for use by the persistence provider for output of the DDL script
//   or a string specifying the file URL for the DDL script.

// javax.persistence.schema-generation.scripts.drop-target
//   specifies a java.IO.Writer configured for use by the persistence provider for output of the DDL script
//   or a string specifying the file URL for the DDL script.

// javax.persistence.database-product-name
//   specified if scripts are to be generated by the persistence provider and a connection to the target database
//   is not supplied. The value of this property should be the value returned for the target database by the
//   JDBC DatabaseMetaData method getDatabaseProductName.

// javax.persistence.database-major-version
//   specified if sufficient database version information is not included from the JDBC DatabaseMetaData method
//   getDatabaseProductName. This value of this property should contain the value returned by the JDBC
//   getDatabaseMajor-Version method.

// javax.persistence.database-minor-version
//   specified if sufficient database version information is not included from the JDBC DatabaseMetaData method
//   getDatabaseProductName. This value of this property should contain the value returned by the JDBC
//   getDatabaseMinor-Version method.

// javax.persistence.schema-generation.create-script-source
//   specifies a java.IO.Reader configured for reading of the DDL script or a string designating a file URL for
//   the DDL script to create the database schema.

// javax.persistence.schema-generation.drop-script-source
//   specifies a java.IO.Reader configured for reading of the DDL script or a string designating a file URL for
//   the DDL script to drop the database schema.

// javax.persistence.schema-generation.connection
//   specifies the JDBC connection to be used for schema generation. This is intended for use in Java EE
//   environments, where the platform provider may want to control the database privileges that are available
//   to the persistence provider.

// javax.persistence.sql-load-script-source
//   specifies a java.IO.Reader configured for reading of the SQL load script for database initialization or
//   a string designating a file URL for the script.
